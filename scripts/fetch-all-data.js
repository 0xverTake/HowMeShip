const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// Configuration
const SCRIPTS_DIR = './scripts';
const OUTPUT_DIR = './data/sc-ships-4.2';

// Scripts √† ex√©cuter dans l'ordre
const SCRIPTS = [
    {
        name: 'fetch-sc-ships-data.js',
        description: 'T√©l√©chargement des donn√©es de vaisseaux Star Citizen 4.2',
        emoji: 'üöÄ'
    },
    {
        name: 'fetch-ship-images.js',
        description: 'T√©l√©chargement des images de vaisseaux',
        emoji: 'üñºÔ∏è'
    },
    {
        name: 'fetch-scrap-data.js',
        description: 'G√©n√©ration des donn√©es de scrap/recyclage',
        emoji: '‚ôªÔ∏è'
    }
];

// Fonction pour ex√©cuter un script Node.js
function runScript(scriptPath) {
    return new Promise((resolve, reject) => {
        console.log(`\n${'='.repeat(60)}`);
        console.log(`Ex√©cution: ${scriptPath}`);
        console.log(`${'='.repeat(60)}\n`);
        
        const child = spawn('node', [scriptPath], {
            stdio: 'inherit',
            cwd: process.cwd()
        });
        
        child.on('close', (code) => {
            if (code === 0) {
                console.log(`\n‚úÖ ${scriptPath} termin√© avec succ√®s\n`);
                resolve();
            } else {
                console.error(`\n‚ùå ${scriptPath} a √©chou√© avec le code ${code}\n`);
                reject(new Error(`Script failed with code ${code}`));
            }
        });
        
        child.on('error', (error) => {
            console.error(`\n‚ùå Erreur lors de l'ex√©cution de ${scriptPath}:`, error.message);
            reject(error);
        });
    });
}

// Fonction pour v√©rifier les pr√©requis
function checkPrerequisites() {
    console.log('üîç V√©rification des pr√©requis...\n');
    
    // V√©rifier que Node.js est disponible
    try {
        const nodeVersion = process.version;
        console.log(`‚úÖ Node.js version: ${nodeVersion}`);
    } catch (error) {
        console.error('‚ùå Node.js non trouv√©');
        return false;
    }
    
    // V√©rifier que les scripts existent
    for (const script of SCRIPTS) {
        const scriptPath = path.join(SCRIPTS_DIR, script.name);
        if (!fs.existsSync(scriptPath)) {
            console.error(`‚ùå Script manquant: ${scriptPath}`);
            return false;
        }
        console.log(`‚úÖ Script trouv√©: ${script.name}`);
    }
    
    // Cr√©er le dossier de sortie si n√©cessaire
    if (!fs.existsSync(OUTPUT_DIR)) {
        fs.mkdirSync(OUTPUT_DIR, { recursive: true });
        console.log(`‚úÖ Dossier de sortie cr√©√©: ${OUTPUT_DIR}`);
    } else {
        console.log(`‚úÖ Dossier de sortie existe: ${OUTPUT_DIR}`);
    }
    
    console.log('\n‚úÖ Tous les pr√©requis sont satisfaits\n');
    return true;
}

// Fonction pour afficher un r√©sum√© final
function displaySummary() {
    console.log(`\n${'='.repeat(60)}`);
    console.log('üìä R√âSUM√â FINAL');
    console.log(`${'='.repeat(60)}\n`);
    
    // V√©rifier les fichiers g√©n√©r√©s
    const expectedFiles = [
        'all-ships-4.2.json',
        'ships-index.json',
        'images-index.json',
        'image-download-results.json',
        'scrap-data.json',
        'scrap-index.json'
    ];
    
    console.log('üìÅ Fichiers g√©n√©r√©s:');
    for (const file of expectedFiles) {
        const filePath = path.join(OUTPUT_DIR, file);
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            const sizeKB = Math.round(stats.size / 1024);
            console.log(`   ‚úÖ ${file} (${sizeKB} KB)`);
        } else {
            console.log(`   ‚ùå ${file} (manquant)`);
        }
    }
    
    // V√©rifier le dossier d'images
    const imagesDir = path.join(OUTPUT_DIR, 'images');
    if (fs.existsSync(imagesDir)) {
        const imageFiles = fs.readdirSync(imagesDir);
        console.log(`\nüñºÔ∏è  Images t√©l√©charg√©es: ${imageFiles.length} fichiers`);
        
        if (imageFiles.length > 0) {
            console.log('   Exemples:');
            imageFiles.slice(0, 5).forEach(file => {
                console.log(`   - ${file}`);
            });
            if (imageFiles.length > 5) {
                console.log(`   ... et ${imageFiles.length - 5} autres`);
            }
        }
    }
    
    // Afficher des statistiques si possible
    try {
        const shipsIndexPath = path.join(OUTPUT_DIR, 'ships-index.json');
        if (fs.existsSync(shipsIndexPath)) {
            const shipsIndex = JSON.parse(fs.readFileSync(shipsIndexPath, 'utf8'));
            console.log(`\nüìà Statistiques des vaisseaux:`);
            console.log(`   - Total vaisseaux: ${shipsIndex.length}`);
            
            // Compter par fabricant
            const manufacturers = {};
            shipsIndex.forEach(ship => {
                const mfg = ship.manufacturer || 'Unknown';
                manufacturers[mfg] = (manufacturers[mfg] || 0) + 1;
            });
            
            console.log(`   - Fabricants: ${Object.keys(manufacturers).length}`);
            const topManufacturers = Object.entries(manufacturers)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 3);
            
            console.log('   - Top fabricants:');
            topManufacturers.forEach(([mfg, count]) => {
                console.log(`     * ${mfg}: ${count} vaisseaux`);
            });
        }
        
        const scrapIndexPath = path.join(OUTPUT_DIR, 'scrap-index.json');
        if (fs.existsSync(scrapIndexPath)) {
            const scrapIndex = JSON.parse(fs.readFileSync(scrapIndexPath, 'utf8'));
            const totalValue = scrapIndex.reduce((sum, ship) => sum + ship.totalScrapValue, 0);
            const avgValue = Math.round(totalValue / scrapIndex.length);
            
            console.log(`\n‚ôªÔ∏è  Statistiques de scrap:`);
            console.log(`   - Valeur totale: ${totalValue.toLocaleString()} aUEC`);
            console.log(`   - Valeur moyenne: ${avgValue.toLocaleString()} aUEC`);
            console.log(`   - Vaisseau le plus rentable: ${scrapIndex[0].name} (${scrapIndex[0].totalScrapValue.toLocaleString()} aUEC)`);
        }
        
    } catch (error) {
        console.log('\n‚ö†Ô∏è  Impossible de lire les statistiques d√©taill√©es');
    }
    
    console.log(`\nüéâ Processus termin√© avec succ√®s !`);
    console.log(`üìÇ Tous les fichiers sont disponibles dans: ${OUTPUT_DIR}`);
    console.log(`\nüí° Vous pouvez maintenant utiliser ces donn√©es dans votre bot Discord HowMeShip`);
}

// Fonction principale
async function main() {
    console.log('üöÄ STAR CITIZEN 4.2 - COLLECTEUR DE DONN√âES COMPLET');
    console.log('=' .repeat(60));
    console.log('Ce script va t√©l√©charger toutes les donn√©es n√©cessaires pour HowMeShip:');
    console.log('‚Ä¢ Donn√©es des vaisseaux (sp√©cifications techniques)');
    console.log('‚Ä¢ Images des vaisseaux (thumbnails, profils, hangar)');
    console.log('‚Ä¢ Donn√©es de scrap/recyclage (valeurs, mat√©riaux)');
    console.log('=' .repeat(60));
    
    const startTime = Date.now();
    
    try {
        // V√©rifier les pr√©requis
        if (!checkPrerequisites()) {
            process.exit(1);
        }
        
        // Ex√©cuter chaque script dans l'ordre
        for (let i = 0; i < SCRIPTS.length; i++) {
            const script = SCRIPTS[i];
            const scriptPath = path.join(SCRIPTS_DIR, script.name);
            
            console.log(`\n${script.emoji} √âtape ${i + 1}/${SCRIPTS.length}: ${script.description}`);
            console.log(`‚è±Ô∏è  D√©but: ${new Date().toLocaleTimeString()}`);
            
            const stepStartTime = Date.now();
            await runScript(scriptPath);
            const stepDuration = Math.round((Date.now() - stepStartTime) / 1000);
            
            console.log(`‚úÖ √âtape ${i + 1} termin√©e en ${stepDuration}s`);
        }
        
        // Afficher le r√©sum√© final
        displaySummary();
        
        const totalDuration = Math.round((Date.now() - startTime) / 1000);
        console.log(`\n‚è±Ô∏è  Dur√©e totale: ${totalDuration}s`);
        
    } catch (error) {
        console.error('\n‚ùå Erreur lors de l\'ex√©cution:', error.message);
        console.log('\nüîß Conseils de d√©pannage:');
        console.log('‚Ä¢ V√©rifiez votre connexion internet');
        console.log('‚Ä¢ Assurez-vous que Node.js est install√©');
        console.log('‚Ä¢ V√©rifiez que tous les scripts sont pr√©sents');
        console.log('‚Ä¢ Essayez d\'ex√©cuter les scripts individuellement');
        process.exit(1);
    }
}

// Gestion des signaux pour un arr√™t propre
process.on('SIGINT', () => {
    console.log('\n\n‚ö†Ô∏è  Arr√™t demand√© par l\'utilisateur (Ctrl+C)');
    console.log('üõë Arr√™t en cours...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\n\n‚ö†Ô∏è  Arr√™t demand√© par le syst√®me');
    console.log('üõë Arr√™t en cours...');
    process.exit(0);
});

// Ex√©cuter le script principal
main();
